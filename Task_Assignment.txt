Rares Muresan Tasks – API and Logic
------------------------------

1. Create the project folder structure following MVC/MVCS principles
2. Initialize the FastAPI app in `main.py` and set up routing
3. Implement business logic functions: pow(a, b), fib(n), and fact(n)
4. Create a central dispatcher function `calculate_operation()` to route math requests
5. Build the `/math/{operation}` endpoint with query parameter handling and input validation
6. Apply caching (`lru_cache`) to `fib()` and `fact()` for performance
7. Write test cases in `test.http` for all math operations and scenarios
8. Perform manual and REST Client-based end-to-end verification of math operation behavior and responses


Vlad Muresan Tasks – Infrastructure, Security, and Deployment
---------------------------------------------------------

1. Set up persistent request logging in the backend:
   - Configure the database engine and session
   - Define the request log model
   - Initialize the database on application startup
   - Store each valid API request in the database

2. Set up JWT authentication using `python-jose`:
   - Implement `get_current_user()` to validate Bearer tokens
   - Configure a shared `SECRET_KEY` and token structure

3. Write a helper script `generate_token.py` to issue test tokens for development use

4. Simulate Kafka-style logging with `log_to_kafka()` that prints structured logs per request

5. Integrate Prometheus monitoring:
   - Add `prometheus-fastapi-instrumentator`
   - Expose the `/metrics` endpoint automatically

6. Create the Dockerfile to containerize the app with all features (API, DB, monitoring, logging)

7. Write and finalize the full `README.md` with setup steps, API examples, and testing instructions